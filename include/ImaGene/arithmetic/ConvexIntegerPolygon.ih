//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : ConvexIntegerPolygon.ih
//
// Creation : 2011/01/11
//
// Version : 2011/01/11
//
// Author : JOL
//          Emilie Charrier (COBA algorithm)
//
// Summary : Implementation of inline methods defined in ConvexIntegerPolygon.h 
//
// History :
//	2011/01/11 : ?Name? : ?What?
//
// Rcs Id : "@(#)class ConvexIntegerPolygon declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_ConvexIntegerPolygon(x)
#define DEBUGCMD_ConvexIntegerPolygon(x)
#else //defined(NO_DEBUG)
#define ASSERT_ConvexIntegerPolygon(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_ConvexIntegerPolygon(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
/////////////////////////// ConvexIntegerPolygon //////////////////////////////
//-----------------------------------------------------------------------------
inline
ImaGene::ConvexIntegerPolygon::ConvexIntegerPolygon()
{}
//-----------------------------------------------------------------------------
inline
ImaGene::ConvexIntegerPolygon::ConvexIntegerPolygon
( const ConvexIntegerPolygon & other )
  : myVertices( other.myVertices )
{}
//-----------------------------------------------------------------------------
inline
ImaGene::ConvexIntegerPolygon & 
ImaGene::ConvexIntegerPolygon::operator=
( const ConvexIntegerPolygon & other )
{
  if ( this != &other )
    myVertices = other.myVertices;
  return *this;
}
//-----------------------------------------------------------------------------
inline
const ImaGene::ConvexIntegerPolygon::VertexList &
ImaGene::ConvexIntegerPolygon::vertices() const
{
  return myVertices;
}
//-----------------------------------------------------------------------------
inline
ImaGene::ConvexIntegerPolygon::VertexList &
ImaGene::ConvexIntegerPolygon::vertices()
{
  return myVertices;
}
//-----------------------------------------------------------------------------
inline
void
ImaGene::ConvexIntegerPolygon::clear()
{
  myVertices.clear();
}
//-----------------------------------------------------------------------------
inline
void
ImaGene::ConvexIntegerPolygon::purge()
{
  Iterator it = myVertices.begin();
  Iterator it_end = myVertices.end();
  while ( it != it_end )
    {
      _A = *it;
      ++it;
      while ( ( it != it_end ) && ( _A == *it ) )
	it = myVertices.erase( it );
    }
  while ( ( myVertices.size() > 1 )
	  && ( * myVertices.begin() == * myVertices.rbegin() ) )
    myVertices.erase( myVertices.begin() );
}
//-----------------------------------------------------------------------------
inline
ImaGene::ConvexIntegerPolygon::Iterator 
ImaGene::ConvexIntegerPolygon::addBefore
( const Iterator & pos, const Point2I & K )
{
  return myVertices.insert( pos, K );
}
//-----------------------------------------------------------------------------
inline
void
ImaGene::ConvexIntegerPolygon::addEnd
( const Point2I & K )
{
  myVertices.push_back( K );
}
//-----------------------------------------------------------------------------



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ConvexIntegerPolygon'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'ConvexIntegerPolygon' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		 const ConvexIntegerPolygon & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


