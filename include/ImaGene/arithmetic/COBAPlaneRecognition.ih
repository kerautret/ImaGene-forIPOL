//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : COBAPlaneRecognition.ih
//
// Creation : 2011/01/12
//
// Version : 2011/01/12
//
// Author : JOL
//          Emilie Charrier
//
// Summary : Implementation of inline methods defined in COBAPlaneRecognition.h 
//
// History :
//	2011/01/12 : ?Name? : ?What?
//
// Rcs Id : "@(#)class COBAPlaneRecognition declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_COBAPlaneRecognition(x)
#define DEBUGCMD_COBAPlaneRecognition(x)
#else //defined(NO_DEBUG)
#define ASSERT_COBAPlaneRecognition(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_COBAPlaneRecognition(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
//-----------------------------------------------------------------------------
inline
void 
ImaGene::COBAPlaneRecognition::clear()
{
  myPts.clear();
  myState.nb_used = 0;
  myState.cip.clear();
}
//-----------------------------------------------------------------------------
inline
void
ImaGene::COBAPlaneRecognition::getState( State & state ) const
{
  state = myState;
}
//-----------------------------------------------------------------------------
inline
void
ImaGene::COBAPlaneRecognition::setState( const State & state )
{
  myState = state;
}
//-----------------------------------------------------------------------------
inline
const ImaGene::COBAPlaneRecognition::Point3i &
ImaGene::COBAPlaneRecognition::point( int i ) const
{
  return myPts[ i ];
}
//-----------------------------------------------------------------------------
inline
unsigned int
ImaGene::COBAPlaneRecognition::size() const
{
  return myState.nb_used;
}
//-----------------------------------------------------------------------------
template <typename Vector3D>
inline
void 
ImaGene::COBAPlaneRecognition::getNormal( Vector3D & normal ) const
{
  switch( myAxis ) {
    case 0 : 
      normal[0] = 1.0;
      normal[1] = get_d( myState.N.y) / get_d( myState.N.x );
      normal[2] = get_d( myState.N.z) / get_d( myState.N.x );
      break;
    case 1 : 
      normal[0] = get_d( myState.N.x) / get_d( myState.N.y );
      normal[1] = 1.0;
      normal[2] = get_d( myState.N.z) / get_d( myState.N.y );
      break;
    case 2 : 
      normal[0] = get_d( myState.N.x) / get_d( myState.N.z );
      normal[1] = get_d( myState.N.y) / get_d( myState.N.z );
      normal[2] = 1.0;
      break;
  }
}
//-----------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'COBAPlaneRecognition'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'COBAPlaneRecognition' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		 const COBAPlaneRecognition & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


