//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : DigitalImageGraph.ih
//
// Creation : 2011/01/26
//
// Version : 2011/01/26
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in DigitalImageGraph.h 
//
// History :
//	2011/01/26 : ?Name? : ?What?
//
// Rcs Id : "@(#)class DigitalImageGraph declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_DigitalImageGraph(x)
#define DEBUGCMD_DigitalImageGraph(x)
#else //defined(NO_DEBUG)
#define ASSERT_DigitalImageGraph(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_DigitalImageGraph(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

///////////////////////////////////////////////////////////////////////////////
// Standard services - public :

//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
ImaGene::DigitalImageGraph<TImage2D>::~DigitalImageGraph()
{
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
ImaGene::DigitalImageGraph<TImage2D>::DigitalImageGraph()
  : myImage( 0 ), myDiameter( 0 )
{}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
ImaGene::DigitalImageGraph<TImage2D>::DigitalImageGraph
( const Image2D & image,
  unsigned int quantification,
  unsigned int xfactor,
  unsigned int yfactor )
  : myImage( &image )
{
  init( image, quantification, xfactor, yfactor );
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
void
ImaGene::DigitalImageGraph<TImage2D>::init
( const Image2D & image,
  unsigned int quantification,
  unsigned int xfactor,
  unsigned int yfactor )
{
  myImage = &image;
  myDiameter = std::max( xfactor*myImage->width(), 
			 std::max( yfactor*myImage->height(),
				   (unsigned int) (myImage->valueRange()/quantification ) ) );
  myQuantification = quantification;
  myXfactor = xfactor;
  myYfactor = yfactor;
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
typename ImaGene::DigitalImageGraph<TImage2D>::Set
ImaGene::DigitalImageGraph<TImage2D>::emptySet() const
{
  return Set();
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
typename ImaGene::DigitalImageGraph<TImage2D>::Set
ImaGene::DigitalImageGraph<TImage2D>::wholeSet() const
{
  Set all;
  for ( unsigned int y = 0; y < myImage->height(); ++y )
    for ( unsigned int x = 0; x < myImage->width(); ++x )
      {
	all += Pixel( x, y );
      }
  return all;
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
void
ImaGene::DigitalImageGraph<TImage2D>::setNeighborhood
( const Vertex & p, Neighborhood & n ) const
{
  n.clear();
  n.setCenter( p );
  n.push_back( p );
  if ( p.x > 0 ) n.push_back( Pixel( p.x - 1, p.y     ) );
  if ( p.y > 0 ) n.push_back( Pixel( p.x,     p.y - 1 ) );
  if ( p.x < ( myImage->width() - 1 ) ) 
    n.push_back( Pixel( p.x + 1, p.y     ) );
  if ( p.y < ( myImage->height() - 1 ) ) 
    n.push_back( Pixel( p.x    , p.y + 1 ) );
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
void
ImaGene::DigitalImageGraph<TImage2D>::setProperNeighborhood
( const Vertex & p, Neighborhood & n ) const
{
  n.clear();
  n.setCenter( p );
  if ( p.x > 0 ) n.push_back( Pixel( p.x - 1, p.y     ) );
  if ( p.y > 0 ) n.push_back( Pixel( p.x,     p.y - 1 ) );
  if ( p.x < ( myImage->width() - 1 ) ) 
    n.push_back( Pixel( p.x + 1, p.y     ) );
  if ( p.y < ( myImage->height() - 1 ) ) 
    n.push_back( Pixel( p.x    , p.y + 1 ) );
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
int
ImaGene::DigitalImageGraph<TImage2D>::dim() const
{
  return 3;
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
int
ImaGene::DigitalImageGraph<TImage2D>::diameter() const
{
  return myDiameter;
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
void
ImaGene::DigitalImageGraph<TImage2D>::embed
( const Vertex & p, int* coords ) const
{
  coords[ 0 ] = p.x * myXfactor;
  coords[ 1 ] = p.y * myYfactor;
  coords[ 2 ] = myImage->at( p.x, p.y ) / myQuantification;
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
unsigned int 
ImaGene::DigitalImageGraph<TImage2D>::preferredAxis( const Vertex & v ) const
{
  return 2;
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
void 
ImaGene::DigitalImageGraph<TImage2D>::selfDisplay
( std::ostream& that_stream ) const
{
  that_stream << "[DigitalImageGraph]";
}
//-----------------------------------------------------------------------------
template <typename TImage2D>
inline
bool 
ImaGene::DigitalImageGraph<TImage2D>::OK() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'DigitalImageGraph'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'DigitalImageGraph' to write.
 * @return the output stream after the writing.
 */
template <typename TImage2D>
inline
std::ostream&
ImaGene::operator<<
( std::ostream & that_stream, 
  const DigitalImageGraph<TImage2D> & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


